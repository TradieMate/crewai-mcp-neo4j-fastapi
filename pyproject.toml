[tool.poetry]
name = "tradie-marketing-analytics"
version = "1.0.0"
description = "TradieMate Marketing Analytics Platform - AI-powered Google Ads and website optimization for trade businesses"
authors = ["TradieMate <support@tradiemate.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/TradieMate/crewai-mcp-neo4j-fastapi"
repository = "https://github.com/TradieMate/crewai-mcp-neo4j-fastapi"
keywords = ["marketing", "analytics", "google-ads", "crewai", "neo4j", "fastapi", "trade-business"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
uvicorn = {extras = ["standard"], version = "^0.34.3"}
crewai = "^0.121.1"
crewai-tools = {extras = ["mcp"], version = "^0.46.0"}
pydantic = "^2.11.5"
fastapi = "^0.115.12"
python-dotenv = "^1.0.0"
uv = "^0.5.0"
httpx = "^0.27.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.24.0"
httpx = "^0.27.0"
black = "^24.0.0"
isort = "^5.13.0"
mypy = "^1.8.0"
flake8 = "^7.0.0"
pytest-cov = "^4.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.24.0"
httpx = "^0.27.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.0.0"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tradie_marketing"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests", "test_main.py"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
