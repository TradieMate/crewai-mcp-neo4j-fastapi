# Local Development - Full Stack Configuration
# For Render deployment, use docker-compose.render.yml instead
version: '3.8'

services:
  # Neo4j Database with Graph Data Science
  neo4j:
    image: neo4j:5.15-enterprise
    platform: linux/amd64
    container_name: tradie-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/tradiemate123
      - NEO4J_PLUGINS=["graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_memory_heap_initial_size=1G
      - NEO4J_dbms_memory_heap_max_size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - tradie-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p tradiemate123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # CrewAI FastAPI Backend + Frontend (Combined for Render compatibility)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: tradie-app
    ports:
      - "10000:10000"
    environment:
      - ENVIRONMENT=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=tradiemate123
      - PORT=10000
      - HOST=0.0.0.0
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=*
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - tradie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  tradie-network:
    driver: bridge