version: '3.8'

services:
  # Neo4j database with GDS plugin
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: neo4j-gds
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
      - ./graph-data-science/build/distributions:/gds-source:ro
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - crewai-network

  # CrewAI FastAPI application with GDS support
  crewai-app:
    build:
      context: .
      dockerfile: Dockerfile.unified
    container_name: crewai-fastapi-gds
    ports:
      - "12000:12000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - PORT=12000
      - HOST=0.0.0.0
      - ALLOWED_ORIGINS=*
      # Add your OpenAI API key here or in .env file
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./.env:/app/.env:ro
      - ./graph-data-science:/app/graph-data-science:ro
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:12000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - crewai-network

  # Optional: GDS Plugin Builder (for development)
  gds-builder:
    build:
      context: ./graph-data-science
      dockerfile: Dockerfile
    container_name: gds-plugin-builder
    volumes:
      - ./graph-data-science:/workspace
      - gds_artifacts:/artifacts
    command: >
      sh -c "
        echo 'Building Graph Data Science plugin...' &&
        ./gradlew :open-packaging:shadowCopy &&
        cp build/distributions/open-gds-*.jar /artifacts/ &&
        echo 'GDS plugin built successfully!'
      "
    profiles:
      - build-only
    networks:
      - crewai-network

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  gds_artifacts:
    driver: local

networks:
  crewai-network:
    driver: bridge